<!-- START OF FILE index.html -->
<!DOCTYPE html>
<html lang="es">
<head>
    <!-- ... (keep head content as is) ... -->
    <style>
        /* ... (keep styles as is) ... */
    </style>
</head>
<body>

<header>
    <!-- ... (keep header as is) ... -->
</header>

<nav>
    <!-- ... (keep nav as is) ... -->
</nav>

<main>
    <!-- Sección Acta -->
    <section id="actaSection" class="container">
        <h1><i class="fas fa-file-signature"></i> Generar Acta de Instrucción</h1>
        <form id="actaForm">
            <!-- NEW: Location Dropdown -->
            <div class="form-group">
                <label for="lugarActa">Lugar</label>
                <select id="lugarActa" required>
                    <option value="" disabled selected>Seleccione un lugar...</option>
                    <!-- Options will be populated by JavaScript -->
                </select>
            </div>
            <!-- End NEW -->

            <div class="form-group">
                <label for="grado">Grado</label>
                <input type="text" id="grado" placeholder="Ej: Capitán" required>
            </div>
            
            <div class="form-group">
                <label for="nombre">Nombre</label>
                <input type="text" id="nombre" placeholder="Nombre completo" required>
            </div>
            
            <div class="form-group">
                <label for="cargo">Cargo</label>
                <input type="text" id="cargo" placeholder="Cargo del funcionario" required>
            </div>
            
            <div class="form-group">
                <label for="tema">Tema de Instrucción</label>
                <input type="text" id="tema" placeholder="Tema" required>
            </div>
            
            <div class="form-group">
                <label for="temas">Temas a tratar</label>
                <textarea id="temas" placeholder="Lista de temas a tratar" required rows="4"></textarea>
            </div>
            
            <button type="submit"><i class="fas fa-check-circle"></i> Generar Acta</button>
        </form>

        <div id="actaGenerada" style="display:none;">
            <h1>ACTA DE INSTRUCCIÓN</h1>
            <!-- MODIFIED: Lugar is now dynamic -->
            <p id="actaInfoLugar">Lugar: <span id="actaLugarDisplay">[Lugar seleccionado]</span></p>
            <br>
            <p id="primerParrafo">
                LA INSTRUCCIÓN DIRIGIDA POR PARTE DEL SEÑOR
                <span id="actaGrado"></span>,
                <span id="actaCargo"></span>,
                <!-- MODIFIED: Location placeholder -->
                AL PERSONAL QUE CONFORMA <span id="actaLugar1"></span>,
                SOBRE <span id="articuloTema">EL</span> <span id="actaTema"></span>.
            </p>

            <!-- ... (keep Orden del Día as is) ... -->
             <br><h3>ORDEN DEL DÍA</h3>
                <ol style="padding-left: 60px;">
                    <li>Verificación de asistentes</li>
                    <li>Lectura del acta anterior</li>
                    <li>Verificación de los compromisos</li>
                    <li>Temas a tratar</li>
                  </ol>

            <br><h3>DESARROLLO</h3>
            <p>
                Se realiza instrucción al personal adscrito a <span id="actaLugar2"></span> <!-- MODIFIED: Location placeholder -->
                por parte del señor <span id="actaGrado2"></span>, <span id="actaCargo2"></span>,
                a quienes se les socializan los lineamientos sobre
                <span id="articuloTema2">el</span> <span id="actaTema2"></span>.
            </p>

            <!-- ... (keep the rest of the Acta structure as is: Verificación, Lectura, etc.) ... -->
             <br><h3>1. Verificación de asistentes</h3>
            <p>
                Se verifica la asistencia del personal adscrito a la unidad y se constata la compatibilidad
                de los correos electrónicos del personal que integra <span id="actaLugar3"></span>. <!-- ADDED: Optional, another place to put the location -->
                Dejando constancia que la presente acta de instrucción se surtirá presencialmente, por correo
                electrónico y a través del Sistema de Información Gestor de Documentos Policiales, en virtud
                a lo dispuesto en el Art. 103 del Código General del Proceso -- Uso de las tecnologías de la
                información y de las comunicaciones, Ley 527 del 18 de agosto de 1999, Ley 794 del 01 de agosto
                de 2003 y la Ley 962 del 08 de julio de 2005.
            </p>

            <br><h3>2. Lectura del acta anterior</h3>
            <p>(NO APLICA)</p>

            <br><h3>3. Verificación de los compromisos</h3>
            <p>(NO APLICA)</p>

            <br><h3>4. Temas a tratar</h3>
            <p id="temasTratar"></p>

        </div>
    </section>

    <!-- Sección Extractor PDF -->
    <section id="pdfSection" class="container" style="display:none;">
       <!-- ... (keep PDF section as is) ... -->
    </section>
</main>

<!-- ... (keep script includes as is) ... -->
<script>
    // ... (keep tab logic as is) ...

    // ------------------------------
    // Funciones para Generar Acta
    // ------------------------------

    // Function to fetch locations and populate dropdown
    async function populateLocationsDropdown() {
        const selectElement = document.getElementById('lugarActa');
        // Clear existing options except the placeholder
        selectElement.options.length = 1;
        try {
            const response = await fetch('locations.json'); // Fetch the JSON file
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const locations = await response.json(); // Parse JSON

            locations.forEach(location => {
                const option = document.createElement('option');
                option.value = location.name; // Use name as value
                option.textContent = location.name; // Use name as display text
                selectElement.appendChild(option);
            });

            // After populating, try to load saved data which might set the selected value
            const savedData = loadFromLocalStorage();
             updateForm(savedData); // updateForm now needs to handle the dropdown

        } catch (error) {
            console.error("Error loading locations:", error);
            // Optionally display an error to the user
            selectElement.disabled = true; // Disable dropdown if loading fails
            const errorOption = document.createElement('option');
            errorOption.textContent = "Error al cargar lugares";
            errorOption.disabled = true;
            selectElement.appendChild(errorOption);
        }
    }


    function saveToLocalStorage(data) {
        localStorage.setItem('actaData', JSON.stringify(data));
    }

    function loadFromLocalStorage() {
        const data = localStorage.getItem('actaData');
        return data ? JSON.parse(data) : null;
    }

    // MODIFIED: updateForm now also sets the dropdown value
    function updateForm(data) {
        if (data) {
            document.getElementById('grado').value = data.grado || '';
            document.getElementById('nombre').value = data.nombre || '';
            document.getElementById('cargo').value = data.cargo || '';
            document.getElementById('tema').value = data.tema || '';
            document.getElementById('temas').value = data.temas || '';
            // Set the selected location in the dropdown
            if (data.lugar) {
               const lugarSelect = document.getElementById('lugarActa');
               // Check if the option exists before setting it
               if ([...lugarSelect.options].some(option => option.value === data.lugar)) {
                   lugarSelect.value = data.lugar;
               } else {
                   console.warn(`Saved location "${data.lugar}" not found in dropdown.`);
                   lugarSelect.value = ""; // Reset to placeholder if not found
               }
            } else {
                 document.getElementById('lugarActa').value = ""; // Default to placeholder if no saved value
            }
        } else {
             // Clear form if no data
            document.getElementById('actaForm').reset();
            document.getElementById('lugarActa').value = ""; // Ensure dropdown is reset
        }
    }

    // ... (keep determinarArticulo function as is) ...
    function determinarArticulo(tema) {
        // ... (implementation remains the same)
        const temaLimpio = tema.trim().toLowerCase();
        if (!temaLimpio) return { articulo: "EL", articuloMin: "el" };
        const masculinos = ["protocolo", "procedimiento", "manual", "instructivo", "reglamento", "decreto", "código", "estatuto", "memorando", "oficio", "formulario", "programa", "plan", "sistema", "método", "formato", "proceso", "uso", "manejo", "curso", "taller", "seminario", "simposio", "congreso", "informe", "reporte", "documento", "expediente", "registro", "archivo", "control", "seguimiento", "operativo", "operacional", "servicio", "deber"];
        const femeninas = ["normativa", "norma", "directiva", "instrucción", "circular", "resolución", "orden", "directriz", "ley", "regulación", "disposición", "medida", "acción", "guía", "metodología", "técnica", "estrategia", "táctica", "operación", "actividad", "capacitación", "formación", "conferencia", "charla", "presentación", "exposición", "jornada", "sesión", "reunión", "clase", "política", "aplicación", "implementación", "comunicación"];
        const masculinosPlural = ["protocolos", "procedimientos", "manuales", "instructivos", "reglamentos", "decretos", "códigos", "estatutos", "memorandos", "oficios", "formularios", "programas", "planes", "sistemas", "métodos", "formatos", "procesos", "usos", "manejos", "cursos", "talleres", "seminarios", "simposios", "congresos", "informes", "reportes", "documentos", "expedientes", "registros", "archivos", "controles", "seguimientos", "operativos"];
        const femeninaPlural = ["normativas", "normas", "directivas", "instrucciones", "circulares", "resoluciones", "órdenes", "directrices", "leyes", "regulaciones", "disposiciones", "medidas", "acciones", "guías", "metodologías", "técnicas", "estrategias", "tácticas", "operaciones", "actividades", "capacitaciones", "formaciones", "conferencias", "charlas", "presentaciones", "exposiciones", "jornadas", "sesiones", "reuniones", "clases", "políticas", "comunicaciones"];
        const palabras = temaLimpio.split(' ');
        let indicePalabra = 0;
        const preposicionesArticulos = ["de", "del", "la", "el", "los", "las", "sobre", "para", "en", "con", "y", "o"];
        while (indicePalabra < palabras.length && preposicionesArticulos.includes(palabras[indicePalabra])) {
            indicePalabra++;
        }
        const primeraPalabra = (indicePalabra < palabras.length) ? palabras[indicePalabra] : palabras[0];
        const esPlural = primeraPalabra.endsWith('s') || primeraPalabra.endsWith('es');
        if (masculinosPlural.includes(primeraPalabra)) { return { articulo: "LOS", articuloMin: "los" }; }
        else if (femeninaPlural.includes(primeraPalabra)) { return { articulo: "LAS", articuloMin: "las" }; }
        else if (masculinos.includes(primeraPalabra)) { return { articulo: "EL", articuloMin: "el" }; }
        else if (femeninas.includes(primeraPalabra)) { return { articulo: "LA", articuloMin: "la" }; }
        if (esPlural) {
            const singular = primeraPalabra.endsWith('es') ? primeraPalabra.slice(0, -2) : primeraPalabra.slice(0, -1);
            if (singular.endsWith('a') || singular.endsWith('dad') || singular.endsWith('ción') || singular.endsWith('sión') || singular.endsWith('tud') || singular.endsWith('umbre')) {
                return { articulo: "LAS", articuloMin: "las" };
            } else { return { articulo: "LOS", articuloMin: "los" }; }
        } else {
            if (primeraPalabra.endsWith('a') || primeraPalabra.endsWith('dad') || primeraPalabra.endsWith('ción') || primeraPalabra.endsWith('sión') || primeraPalabra.endsWith('tud') || primeraPalabra.endsWith('umbre')) {
                return { articulo: "LA", articuloMin: "la" };
            } else { return { articulo: "EL", articuloMin: "el" }; }
        }
    }


    // MODIFIED: generateActa now uses the location data
    function generateActa(data) {
        const selectedLugar = data.lugar || document.getElementById('lugarActa').value; // Get selected location

        // Update basic info
        document.getElementById('actaGrado').textContent = data.grado + ' ' + data.nombre;
        document.getElementById('actaCargo').textContent = data.cargo;
        document.getElementById('actaTema').textContent = data.tema;
        document.getElementById('actaGrado2').textContent = data.grado + ' ' + data.nombre;
        document.getElementById('actaCargo2').textContent = data.cargo;
        document.getElementById('actaTema2').textContent = data.tema;
        document.getElementById('temasTratar').textContent = data.temas;

        // Update location placeholders
        document.getElementById('actaLugarDisplay').textContent = selectedLugar; // Update the "Lugar:" line
        document.getElementById('actaLugar1').textContent = selectedLugar; // Update in first paragraph
        document.getElementById('actaLugar2').textContent = selectedLugar; // Update in DESARROLLO paragraph
        document.getElementById('actaLugar3').textContent = selectedLugar; // Update in Verificación paragraph

        // Determine and set article based on theme
        const { articulo, articuloMin } = determinarArticulo(data.tema);
        document.getElementById('articuloTema').textContent = articulo;
        document.getElementById('articuloTema2').textContent = articuloMin;

        document.getElementById('actaGenerada').style.display = 'block';
    }

    // MODIFIED: DOMContentLoaded now calls populateLocationsDropdown
    document.addEventListener('DOMContentLoaded', async function() {
        await populateLocationsDropdown(); // Wait for dropdown to populate first
        // The call to loadFromLocalStorage and updateForm is now inside populateLocationsDropdown's success path
        // We still might need to generate the acta if data was loaded successfully
        const savedData = loadFromLocalStorage();
        if (savedData && savedData.grado && savedData.lugar) { // Check if essential data exists
             // Ensure dropdown has finished populating and the value is set before generating
            setTimeout(() => { // Use a small timeout to ensure dropdown value is set if updateForm ran correctly
                 if (document.getElementById('lugarActa').value === savedData.lugar) {
                     generateActa(savedData);
                 } else {
                     console.log("Dropdown value not yet set, skipping initial acta generation.");
                 }
             }, 100); // 100ms delay, adjust if needed
        }
    });

    // MODIFIED: Form submission now includes the location
    document.getElementById('actaForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const data = {
            // Get selected location from dropdown
            lugar: document.getElementById('lugarActa').value,
            grado: document.getElementById('grado').value,
            nombre: document.getElementById('nombre').value,
            cargo: document.getElementById('cargo').value,
            tema: document.getElementById('tema').value,
            temas: document.getElementById('temas').value
        };

        // Validate if a location was selected
        if (!data.lugar) {
             alert("Por favor, seleccione un lugar."); // Or show a more integrated message
             document.getElementById('lugarActa').focus();
             return; // Stop submission
         }


        saveToLocalStorage(data);
        generateActa(data);
    });

    // ------------------------------
    // Funciones Extractor PDF
    // ------------------------------
    // ... (keep all PDF Extractor functions exactly as they were) ...
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.worker.min.js';
    const fileInput = document.getElementById('fileInput');
    const dropZone = document.getElementById('dropZone');
    const processButton = document.getElementById('processButton');
    const output = document.getElementById('output');
    const suggestion = document.getElementById('suggestion');
    const stats = document.getElementById('stats');
    const processedStat = document.getElementById('processedStat');
    const blankStat = document.getElementById('blankStat');
    const imageContainer = document.getElementById('imageContainer');
    const currentImage = document.getElementById('currentImage');
    const downloadAllButton = document.getElementById('downloadAll');
    const currentImageIndex = document.getElementById('currentImageIndex');
    const totalImages = document.getElementById('totalImages');
    const marginRange = document.getElementById('marginRange');
    const rangeValueSpan = document.getElementById('rangeValue');
    marginRange.addEventListener('input', () => { rangeValueSpan.textContent = marginRange.value; });
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    let singlePageImages = [];
    let processedImages = [];
    let currentIndex = 0;
    dropZone.addEventListener('click', () => fileInput.click());
    dropZone.addEventListener('dragover', (e) => { e.preventDefault(); dropZone.classList.add('dragover'); });
    dropZone.addEventListener('dragleave', () => { dropZone.classList.remove('dragover'); });
    dropZone.addEventListener('drop', (e) => { e.preventDefault(); dropZone.classList.remove('dragover'); const files = e.dataTransfer.files; if (files.length) { fileInput.files = files; handleFileSelection(); } });
    fileInput.addEventListener('change', handleFileSelection);
    async function handleFileSelection() { /* ... PDF code ... */
         const file = fileInput.files[0]; if (!file || file.type !== 'application/pdf') { suggestion.innerHTML = '<i class="fas fa-exclamation-circle"></i> Por favor, sube un archivo PDF válido.'; suggestion.style.display = 'block'; return; } suggestion.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Analizando el archivo...'; suggestion.style.display = 'block'; try { const arrayBuffer = await file.arrayBuffer(); const pdf = await pdfjsLib.getDocument(arrayBuffer).promise; suggestion.innerHTML = '<i class="fas fa-check-circle"></i> Archivo PDF cargado correctamente.'; processButton.onclick = () => processPDF(pdf); } catch (error) { suggestion.innerHTML = '<i class="fas fa-times-circle"></i> Error al cargar el archivo PDF.'; console.error("Error al cargar el archivo PDF: ", error); }
    }
    async function processPDF(pdf) { /* ... PDF code ... */
         output.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando PDF...'; output.style.display = 'block'; imageContainer.style.display = 'none'; stats.style.display = 'none'; singlePageImages = []; processedImages = []; currentIndex = 0; downloadAllButton.style.display = 'none'; try { const numPages = pdf.numPages; let processedPages = 0; let blankPages = 0; const pagesMode = parseInt(document.querySelector('input[name="pagesMode"]:checked').value, 10); for (let i = 1; i <= numPages; i++) { const isBlank = await processPage(pdf, i); if (isBlank) { blankPages++; } else { processedPages++; } output.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Procesando página ${i} de ${numPages}...`; } if (pagesMode === 1) { processedImages = singlePageImages; } else if (pagesMode === 4) { let index = 0; while (index < singlePageImages.length) { const remaining = singlePageImages.length - index; if (remaining >= 4) { const group = singlePageImages.slice(index, index + 4); const collage = await createCollageOfFour(group); processedImages.push(collage); index += 4; } else { const leftover = singlePageImages.slice(index); processedImages.push(...leftover); break; } } } processedStat.textContent = processedPages; blankStat.textContent = blankPages; stats.style.display = 'flex'; output.innerHTML = '<i class="fas fa-check-circle"></i> Proceso completado. Todas las imágenes han sido generadas.'; downloadAllButton.style.display = 'block'; if (processedImages.length > 0) { currentIndex = 0; totalImages.textContent = processedImages.length; currentImageIndex.textContent = currentIndex + 1; showImage(currentIndex); imageContainer.style.display = 'block'; } else { imageContainer.style.display = 'none'; } } catch (error) { output.innerHTML = `<i class="fas fa-times-circle"></i> Error: ${error.message}`; console.error('Error durante el procesamiento del PDF:', error); }
    }
    async function processPage(pdf, pageNumber) { /* ... PDF code ... */
         const page = await pdf.getPage(pageNumber); const scale = 3; const viewport = page.getViewport({ scale }); const canvas = document.createElement('canvas'); const context = canvas.getContext('2d'); canvas.height = viewport.height; canvas.width = viewport.width; await page.render({ canvasContext: context, viewport }).promise; const imageData = context.getImageData(0, 0, canvas.width, canvas.height); if (isPageBlank(imageData)) { return true; } const bounds = findContentBounds(imageData); const croppedCanvas = document.createElement('canvas'); croppedCanvas.width = bounds.right - bounds.left; croppedCanvas.height = bounds.bottom - bounds.top; const croppedContext = croppedCanvas.getContext('2d'); croppedContext.drawImage( canvas, bounds.left, bounds.top, croppedCanvas.width, croppedCanvas.height, 0, 0, croppedCanvas.width, croppedCanvas.height ); const dataUrl = croppedCanvas.toDataURL('image/png'); singlePageImages.push({ name: `page_${pageNumber}.png`, dataUrl: dataUrl }); return false;
     }
    function isPageBlank(imageData) { /* ... PDF code ... */
         const { data, width, height } = imageData; const threshold = 245; const sampleSize = 100; const totalPixels = width * height; let whitePixels = 0; for (let i = 0; i < sampleSize; i++) { const randomPixel = Math.floor(Math.random() * totalPixels); const index = randomPixel * 4; if (data[index] > threshold && data[index + 1] > threshold && data[index + 2] > threshold) { whitePixels++; } } return (whitePixels / sampleSize) > 0.98;
     }
    function findContentBounds(imageData) { /* ... PDF code ... */
         const { data, width, height } = imageData; const initialMargin = parseInt(marginRange.value); let left = width, top = height, right = 0, bottom = 0; const threshold = 200; const extraMargin = 5; for (let y = initialMargin; y < height - initialMargin; y++) { for (let x = initialMargin; x < width - initialMargin; x++) { const i = (y * width + x) * 4; const r = data[i]; const g = data[i + 1]; const b = data[i + 2]; if (r < threshold || g < threshold || b < threshold) { left = Math.min(left, x); top = Math.min(top, y); right = Math.max(right, x); bottom = Math.max(bottom, y); } } } return { left: Math.max(initialMargin, left - extraMargin), top: Math.max(initialMargin, top - extraMargin), right: Math.min(width - initialMargin, right + extraMargin), bottom: Math.min(height - initialMargin, bottom + extraMargin) };
     }
    async function createCollageOfFour(imagesGroup) { /* ... PDF code ... */
         const collageWidth = 1275; const collageHeight = 1650; const collageCanvas = document.createElement('canvas'); collageCanvas.width = collageWidth; collageCanvas.height = collageHeight; const collageContext = collageCanvas.getContext('2d'); const quadrantWidth = collageWidth / 2; const quadrantHeight = collageHeight / 2; for (let i = 0; i < imagesGroup.length; i++) { const imageData = imagesGroup[i]; const imageEl = new Image(); await new Promise((resolve) => { imageEl.onload = resolve; imageEl.src = imageData.dataUrl; }); const row = Math.floor(i / 2); const col = i % 2; const dx = col * quadrantWidth; const dy = row * quadrantHeight; collageContext.drawImage( imageEl, 0, 0, imageEl.width, imageEl.height, dx, dy, quadrantWidth, quadrantHeight ); } return { name: 'collage.png', dataUrl: collageCanvas.toDataURL('image/png') };
     }
    function showImage(index) { /* ... PDF code ... */
         if (processedImages.length === 0) return; currentImage.src = processedImages[index].dataUrl; currentImage.alt = processedImages[index].name || `Imagen ${index + 1}`; currentImageIndex.textContent = index + 1; prevButton.disabled = (index === 0); nextButton.disabled = (index === processedImages.length - 1);
     }
    prevButton.addEventListener('click', () => { if (currentIndex > 0) { currentIndex--; showImage(currentIndex); } });
    nextButton.addEventListener('click', () => { if (currentIndex < processedImages.length - 1) { currentIndex++; showImage(currentIndex); } });
    currentImage.addEventListener('click', async () => { /* ... PDF code ... */
         try { const dataUrl = processedImages[currentIndex].dataUrl; const blob = await (await fetch(dataUrl)).blob(); const clipboardItem = new ClipboardItem({ [blob.type]: blob }); await navigator.clipboard.write([clipboardItem]); console.log('Imagen copiada al portapapeles.'); const toast = document.createElement('div'); toast.style.position = 'fixed'; toast.style.bottom = '20px'; toast.style.left = '50%'; toast.style.transform = 'translateX(-50%)'; toast.style.background = 'rgba(76, 175, 80, 0.9)'; toast.style.color = 'white'; toast.style.padding = '8px 16px'; toast.style.borderRadius = '4px'; toast.style.zIndex = '1000'; toast.style.fontSize = '10pt'; toast.innerHTML = '<i class="fas fa-check-circle"></i> ¡Imagen copiada al portapapeles!'; document.body.appendChild(toast); setTimeout(() => { toast.style.opacity = '0'; toast.style.transition = 'opacity 0.5s'; setTimeout(() => document.body.removeChild(toast), 500); }, 2000); if (currentIndex < processedImages.length - 1) { currentIndex++; showImage(currentIndex); } } catch (error) { console.error('Error al copiar la imagen:', error); }
     });
    async function downloadAllImages() { /* ... PDF code ... */
         const zip = new JSZip(); processedImages.forEach((image, index) => { const base64Data = image.dataUrl.split(',')[1]; let fileName = image.name; if (!fileName) { fileName = `imagen_${index + 1}.png`; } zip.file(fileName, base64Data, { base64: true }); }); const content = await zip.generateAsync({ type: 'blob' }); const link = document.createElement('a'); link.href = URL.createObjectURL(content); link.download = 'imagenes_extraidas.zip'; link.click();
     }
    downloadAllButton.addEventListener('click', downloadAllImages);


</script>
</body>
</html>
<!-- END OF FILE index.html -->
