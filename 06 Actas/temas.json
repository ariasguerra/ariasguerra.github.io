<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aplicaci√≥n Unificada: Generar Acta & Extractor PDF</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #4CAF50; --primary-dark: #45a049; --primary-light: #a5d6a7;
            --secondary: #f4f4f4; --text: #333333; --text-light: #666666;
            --border: #cccccc; --danger: #f44336; --success: #4caf50;
            --radius: 0.375rem; --shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            --fab-size: 50px;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Arial', Segoe UI, sans-serif; font-size: 10pt; color: var(--text); background-color: #f9fafb; line-height: 1.5; margin: 0; }
        header { background: var(--primary); color: white; text-align: center; padding: 20px; box-shadow: var(--shadow); }
        .app-title { font-size: 14pt; font-weight: 600; margin-bottom: 0.5rem; }
        .app-subtitle { font-size: 10pt; opacity: 0.9; }
        nav { background: var(--secondary); display: flex; justify-content: center; gap: 20px; padding: 10px 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
        nav a { text-decoration: none; color: var(--text); padding: 8px 15px; border-radius: var(--radius); transition: background-color 0.3s; font-weight: 500; display: flex; align-items: center; gap: 8px; }
        nav a:hover { background-color: var(--primary-light); color: var(--text); }
        nav a.active { background-color: var(--primary); color: white; }
        .container { max-width: 800px; margin: 20px auto; background: white; border-radius: var(--radius); box-shadow: var(--shadow); padding: 20px; border: 1px solid var(--border); }
        h1 { text-align: center; font-size: 14pt; margin-bottom: 20px; display: flex; align-items: center; justify-content: center; gap: 10px; }
        h1 i { color: var(--primary); }
        #actaGenerada h3 { font-size: 10pt; margin: 15px 0 5px; display: inline-block; }
        form .form-group { margin-bottom: 15px; }
        form label { font-weight: 600; display: block; margin-bottom: 5px; font-size: 10pt; }
        form input[type="text"], form textarea, form select { width: 100%; padding: 8px 10px; border: 1px solid var(--border); border-radius: var(--radius); font-size: 10pt; background-color: white; }
        form input[type="text"]:focus, form textarea:focus, form select:focus { outline: none; border-color: var(--primary); }
        form select:disabled { background-color: #eee; cursor: not-allowed; }
        button { background-color: var(--primary); color: white; border: none; border-radius: var(--radius); cursor: pointer; padding: 10px 15px; font-size: 10pt; display: inline-flex; align-items: center; gap: 8px; transition: background-color 0.3s; }
        button:hover { background-color: var(--primary-dark); }
        button:disabled { background-color: #ccc; cursor: not-allowed; }
        #actaGenerada { border-top: 1px solid var(--border); margin-top: 20px; padding-top: 20px; text-align: justify; }
        #primerParrafo { text-transform: uppercase; margin-bottom: 5px; }
        #primerParrafo + .copy-btn-inline { margin-bottom: 15px; }
        .drop-zone { border: 2px dashed var(--border); padding: 50px; text-align: center; cursor: pointer; background-color: var(--secondary); margin: 20px 0; border-radius: var(--radius); transition: all 0.3s; display: flex; flex-direction: column; align-items: center; gap: 15px; }
        .drop-zone i { font-size: 2.5rem; color: var(--text-light); }
        .drop-zone.dragover { border-color: var(--primary); background-color: #e6ffe6; }
        .drop-zone.dragover i { color: var(--primary); }
        #output, #suggestion, #stats { margin-top: 20px; padding: 10px; background-color: var(--secondary); border-radius: var(--radius); font-size: 10pt; }
        #stats { display: flex; flex-wrap: wrap; gap: 10px; }
        .stat-item { display: flex; align-items: center; gap: 8px; background: white; padding: 8px 12px; border-radius: var(--radius); border: 1px solid var(--border); }
        .stat-item i { color: var(--primary); }
        .range-container { margin: 20px 0; }
        .range-container label { display: flex; justify-content: space-between; font-weight: 600; margin-bottom: 5px; }
        input[type="range"] { width: 100%; }
        .icon-group { display: flex; flex-wrap: wrap; align-items: center; gap: 20px; margin: 15px 0; justify-content: center; }
        .icon-group label { cursor: pointer; display: flex; flex-direction: column; align-items: center; font-weight: normal; padding: 10px; border: 2px solid var(--border); border-radius: var(--radius); transition: all 0.3s; }
        .icon-group label:hover { border-color: var(--primary-light); }
        .icon-group input[type="radio"] { display: none; }
        .single-box { width: 50px; height: 50px; background-color: #e5e7eb; margin-bottom: 5px; border-radius: 0.25rem; }
        .four-boxes { display: grid; grid-template-columns: repeat(2, 20px); grid-template-rows: repeat(2, 20px); gap: 5px; margin-bottom: 5px; }
        .four-boxes .box { background-color: #e5e7eb; border-radius: 0.25rem; }
        .icon-group input[type="radio"]:checked + label { border-color: var(--primary); background-color: rgba(76, 175, 80, 0.1); }
        .image-container { margin-top: 20px; text-align: center; }
        .image-wrapper { display: inline-block; background-color: white; border: 1px solid var(--border); border-radius: var(--radius); overflow: hidden; box-shadow: var(--shadow); max-width: 100%; position: relative; }
        .image-wrapper::after { content: "Haz clic para copiar"; position: absolute; bottom: 0; left: 0; right: 0; background: rgba(0,0,0,0.7); color: white; padding: 5px; font-size: 9pt; opacity: 0; transition: opacity 0.3s; pointer-events: none; }
        .image-wrapper:hover::after { opacity: 1; }
        .image-wrapper img { width: auto; height: auto; max-width: 100%; cursor: pointer; display: block; }
        .image-navigation { margin-top: 10px; display: flex; justify-content: center; gap: 20px; align-items: center; }
        .image-counter { font-size: 10pt; color: var(--text-light); }
        .toast-notification { position:fixed; bottom:20px; left:50%; transform:translateX(-50%); background:rgba(76,175,80,0.9); color:white; padding:8px 16px; border-radius:4px; z-index:1000; font-size:10pt; transition: opacity 0.5s ease-in-out; opacity: 0; }
        .toast-notification.show { opacity: 1; }
        .toast-notification.error { background-color: var(--danger); }
        #fabTemasSugeridos { position: fixed; bottom: 25px; right: 25px; width: var(--fab-size); height: var(--fab-size); background-color: var(--primary); color: white; border: none; border-radius: 50%; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); font-size: 18px; cursor: pointer; display: flex; align-items: center; justify-content: center; z-index: 1000; transition: background-color 0.3s, transform 0.3s ease-out, opacity 0.3s ease-out; opacity: 0; transform: scale(0); pointer-events: none; }
        #fabTemasSugeridos.visible { opacity: 1; transform: scale(1); pointer-events: auto; }
        #fabTemasSugeridos:hover { background-color: var(--primary-dark); }
        #temasOverlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); z-index: 1040; opacity: 0; transition: opacity 0.3s ease-in-out; pointer-events: none; }
        #temasPanel { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%) scale(0.95); width: 90%; max-width: 500px; max-height: 80vh; background-color: white; border-radius: var(--radius); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); z-index: 1050; display: flex; flex-direction: column; opacity: 0; transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out; pointer-events: none; }
        #temasOverlay.visible, #temasPanel.visible { opacity: 1; pointer-events: auto; }
        #temasPanel.visible { transform: translate(-50%, -50%) scale(1); }
        #temasPanelHeader { display: flex; justify-content: space-between; align-items: center; padding: 12px 15px; border-bottom: 1px solid var(--border); flex-shrink: 0; }
        #temasPanelHeader h4 { margin: 0; font-size: 11pt; color: var(--primary); display: flex; align-items: center; gap: 8px; }
        #temasPanelCloseBtn { background: none; border: none; font-size: 18px; color: var(--text-light); cursor: pointer; padding: 5px; line-height: 1; }
        #temasPanelCloseBtn:hover { color: var(--danger); }
        #temasPanelContent { padding: 15px; overflow-y: auto; flex-grow: 1; }
        #temasPanelContent .tema-card { background-color: var(--secondary); border: 1px solid var(--border); border-radius: var(--radius); padding: 10px 12px; margin-bottom: 8px; cursor: pointer; transition: background-color 0.2s, border-color 0.2s; font-size: 9.5pt; position: relative; }
        #temasPanelContent .tema-card:hover { background-color: var(--primary-light); border-color: var(--primary); }
        #temasPanelContent .tema-card-title { font-weight: 600; color: var(--text); display: block; margin-right: 20px; }
        #temasPanelContent .tema-card::after { content: "\f054"; font-family: "Font Awesome 6 Free"; font-weight: 900; position: absolute; right: 10px; top: 50%; transform: translateY(-50%); color: var(--primary); opacity: 0.3; transition: opacity 0.2s; }
        #temasPanelContent .tema-card:hover::after { opacity: 0.8; }
        .copy-btn-inline { background-color: var(--secondary); color: var(--text-light); border: 1px solid var(--border); border-radius: var(--radius); padding: 2px 6px; font-size: 9pt; margin-left: 8px; cursor: pointer; transition: all 0.2s; vertical-align: middle; line-height: 1; display: inline-flex; align-items: center; gap: 0; }
        .copy-btn-inline:hover { background-color: var(--primary-light); color: var(--primary-dark); border-color: var(--primary); }
        .copy-btn-inline i { font-size: 0.9em; }
        #copyTargetEquipo { display: inline-flex; align-items: center; gap: 8px; }
        #copyTargetEquipo span { margin: 0; }
        #actaContenidoDetallado h3 + .copy-btn-inline { margin-left: 10px; vertical-align: baseline; }
        @media (max-width: 600px) { .container { padding: 10px; margin: 10px auto; } .drop-zone { padding: 30px 15px; } .icon-group { flex-direction: column; } nav { flex-wrap: wrap; justify-content: center; } #fabTemasSugeridos { bottom: 15px; right: 15px; width: calc(var(--fab-size) * 0.9); height: calc(var(--fab-size) * 0.9); font-size: 16px; } #temasPanel { width: 95%; } .copy-btn-inline { padding: 1px 4px; font-size: 8pt; margin-left: 5px;} }
    </style>
</head>
<body>
     <header> <h1 class="app-title">Aplicaci√≥n Unificada</h1> <p class="app-subtitle">Generaci√≥n de Acta de Instrucci√≥n & Extractor de Contenido PDF</p> </header>
     <nav> <a href="#" id="tabActa" class="active"><i class="fas fa-file-alt"></i> Generar Acta</a> <a href="#" id="tabPdf"><i class="fas fa-file-pdf"></i> Extractor PDF</a> </nav>
    <main>
        <section id="actaSection" class="container">
            <h1><i class="fas fa-file-signature"></i> Generar Acta de Instrucci√≥n</h1>
            <form id="actaForm"> <div class="form-group"> <label for="equipoActa">Equipo de Trabajo</label> <select id="equipoActa" required> <option value="" disabled selected>Cargando equipos...</option> </select> </div> <div class="form-group"> <label for="grado">Grado</label> <input type="text" id="grado" placeholder="Ej: Capit√°n" required> </div> <div class="form-group"> <label for="nombre">Nombre</label> <input type="text" id="nombre" placeholder="Nombre completo" required> </div> <div class="form-group"> <label for="cargo">Cargo</label> <input type="text" id="cargo" placeholder="Cargo del funcionario" required> </div> <div class="form-group"> <label for="tema">Tema de Instrucci√≥n</label> <input type="text" id="tema" placeholder="Tema (use üí° para sugerencias)" required> </div> <div class="form-group"> <label for="temas">Temas a tratar</label> <textarea id="temas" placeholder="Lista de temas (use üí° para sugerencias)" required rows="4"></textarea> </div> <button type="submit" style="margin-top: 20px;"><i class="fas fa-check-circle"></i> Generar Acta</button> </form>
            <div id="actaGenerada" style="display:none;">
                <h1>ACTA DE INSTRUCCI√ìN</h1>
                <p id="actaInfoEquipo">Equipo de Trabajo:
                    <span id="copyTargetEquipo">
                        <span id="actaEquipoDisplay"></span>
                        <button id="copyEquipoBtn" class="copy-btn-inline" title="Copiar Equipo">
                            <i class="fas fa-copy"></i>
                        </button>
                    </span>
                </p>
                <br>
                <p id="primerParrafo">
                    LA INSTRUCCI√ìN DIRIGIDA POR PARTE DEL SE√ëOR
                    <span id="actaGrado"></span>,
                    <span id="actaCargo"></span>,
                    AL PERSONAL QUE CONFORMA <span id="actaEquipo1"></span>,
                    SOBRE <span id="articuloTema"></span> <span id="actaTema"></span>.
                </p>
                 <button id="copyPrimerParrafoBtn" class="copy-btn-inline" title="Copiar P√°rrafo Anterior">
                     <i class="fas fa-copy"></i>
                 </button>
                <br>
                <div id="actaContenidoDetallado">
                    <h3>ORDEN DEL D√çA</h3>
                    <button id="copyOrdenDesarrolloBtn" class="copy-btn-inline" title="Copiar Orden del D√≠a y Desarrollo">
                         <i class="fas fa-copy"></i>
                    </button>
                    <ol style="padding-left: 60px;">
                        <li>Verificaci√≥n de asistentes</li>
                        <li>Lectura del acta anterior</li>
                        <li>Verificaci√≥n de los compromisos</li>
                        <li>Temas a tratar</li>
                    </ol>
                    <br><h3>DESARROLLO</h3>
                    <p> Se realiza instrucci√≥n al personal adscrito <span id="actaEquipo2"></span> por parte del se√±or <span id="actaGrado2"></span>, <span id="actaCargo2"></span>, a quienes se les socializan los lineamientos sobre <span id="articuloTema2"></span> <span id="actaTema2"></span>. </p>
                    <br><h3>1. Verificaci√≥n de asistentes</h3>
                    <p> Se verifica la asistencia del personal adscrito a la unidad y se constata la compatibilidad de los correos electr√≥nicos del personal que integra <span id="actaEquipo3"></span>. Dejando constancia que la presente acta de instrucci√≥n se surtir√° presencialmente, por correo electr√≥nico y a trav√©s del Sistema de Informaci√≥n Gestor de Documentos Policiales, en virtud a lo dispuesto en el Art. 103 del C√≥digo General del Proceso -- Uso de las tecnolog√≠as de la informaci√≥n y de las comunicaciones, Ley 527 del 18 de agosto de 1999, Ley 794 del 01 de agosto de 2003 y la Ley 962 del 08 de julio de 2005. </p>
                    <br><h3>2. Lectura del acta anterior</h3><p>(NO APLICA)</p>
                    <br><h3>3. Verificaci√≥n de los compromisos</h3><p>(NO APLICA)</p>
                    <br><h3>4. Temas a tratar</h3>
                    <p id="temasTratar"></p>
                </div>
            </div>
        </section>
        <section id="pdfSection" class="container" style="display:none;">
              <h1><i class="fas fa-file-export"></i> Extractor de Contenido PDF Mejorado</h1> <div class="form-group"> <label for="fileInput">Seleccionar archivo PDF o arrastrar y soltar:</label> <div id="dropZone" class="drop-zone"> <i class="fas fa-file-upload"></i> <p>Arrastra y suelta el archivo PDF aqu√≠ o haz clic para seleccionarlo</p> </div> <input type="file" id="fileInput" accept=".pdf" style="display: none;"> </div> <div id="suggestion"></div> <div class="range-container"> <label for="marginRange">Margen sugerido para recorte (p√≠xeles): <span id="rangeValue">150</span></label> <input type="range" id="marginRange" value="150" min="0" max="200" step="1"> </div> <div> <p style="margin: 10px 0; font-weight: 600;">Elige modo de agrupaci√≥n:</p> <div class="icon-group"> <input type="radio" id="singleMode" name="pagesMode" value="1" checked> <label for="singleMode"><div class="single-box"></div><span>1 Hoja</span></label> <input type="radio" id="fourMode" name="pagesMode" value="4"> <label for="fourMode"><div class="four-boxes"><div class="box"></div><div class="box"></div><div class="box"></div><div class="box"></div></div><span>4 Hojas</span></label> </div> </div> <button id="processButton"><i class="fas fa-cogs"></i> Procesar PDF</button> <div id="output"></div> <div id="stats" style="display: none;"> <div class="stat-item"><i class="fas fa-file-alt"></i><span id="processedStat">0</span> p√°ginas procesadas</div> <div class="stat-item"><i class="fas fa-file"></i><span id="blankStat">0</span> p√°ginas en blanco omitidas</div> </div> <div class="image-container" id="imageContainer" style="display:none;"> <div class="image-wrapper"><img id="currentImage" alt="Imagen actual extra√≠da del PDF"></div> <div class="image-navigation"> <button id="prevButton"><i class="fas fa-chevron-left"></i> Anterior</button> <span class="image-counter">Imagen <span id="currentImageIndex">1</span> de <span id="totalImages">1</span></span> <button id="nextButton">Siguiente <i class="fas fa-chevron-right"></i></button> </div> </div> <button id="downloadAll" style="display: none; margin-top: 20px;"><i class="fas fa-download"></i> Descargar todas las im√°genes</button>
        </section>
    </main>
     <button id="fabTemasSugeridos" title="Temas Sugeridos"> <i class="fas fa-lightbulb"></i> </button> <div id="temasOverlay"></div> <div id="temasPanel"> <div id="temasPanelHeader"> <h4><i class="fas fa-list-ul"></i> Temas Frecuentes</h4> <button id="temasPanelCloseBtn" title="Cerrar">√ó</button> </div> <div id="temasPanelContent"> <p style="color: var(--text-light); text-align: center;">Cargando temas...</p> </div> </div>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.worker.min.js"></script>
    <script>
        // --- Referencias DOM ---
        const tabActa = document.getElementById('tabActa'); const tabPdf = document.getElementById('tabPdf'); const actaSection = document.getElementById('actaSection'); const pdfSection = document.getElementById('pdfSection'); const equipoActaSelect = document.getElementById('equipoActa'); const actaForm = document.getElementById('actaForm'); const actaGeneradaDiv = document.getElementById('actaGenerada'); const temaInput = document.getElementById('tema'); const temasTextarea = document.getElementById('temas'); const fabTemasSugeridos = document.getElementById('fabTemasSugeridos'); const temasOverlay = document.getElementById('temasOverlay'); const temasPanel = document.getElementById('temasPanel'); const temasPanelContent = document.getElementById('temasPanelContent'); const temasPanelCloseBtn = document.getElementById('temasPanelCloseBtn');

        // --- L√≥gica Pesta√±as y FAB ---
        function showActaSection() { tabActa.classList.add('active'); tabPdf.classList.remove('active'); actaSection.style.display = 'block'; pdfSection.style.display = 'none'; fabTemasSugeridos.classList.add('visible'); }
        function showPdfSection() { tabPdf.classList.add('active'); tabActa.classList.remove('active'); pdfSection.style.display = 'block'; actaSection.style.display = 'none'; fabTemasSugeridos.classList.remove('visible'); closeTemasPanel(); }
        tabActa.addEventListener('click', (e) => { e.preventDefault(); showActaSection(); }); tabPdf.addEventListener('click', (e) => { e.preventDefault(); showPdfSection(); });

        // --- L√≥gica Panel Modal ---
        function openTemasPanel() { temasOverlay.classList.add('visible'); temasPanel.classList.add('visible'); }
        function closeTemasPanel() { temasOverlay.classList.remove('visible'); temasPanel.classList.remove('visible'); }
        fabTemasSugeridos.addEventListener('click', openTemasPanel); temasPanelCloseBtn.addEventListener('click', closeTemasPanel); temasOverlay.addEventListener('click', closeTemasPanel);

        // --- Poblar Dropdown Equipos ---
        function populateEquiposDropdown(equiposData) { equipoActaSelect.options.length = 0; const initialOption = document.createElement('option'); initialOption.value = ""; initialOption.textContent = "Seleccione un equipo..."; initialOption.disabled = true; initialOption.selected = true; equipoActaSelect.appendChild(initialOption); if (!equiposData || !Array.isArray(equiposData)) { console.error("Datos de equipos inv√°lidos."); equipoActaSelect.disabled = true; initialOption.textContent = "Error al cargar"; return; } equiposData.forEach(equipo => { const option = document.createElement('option'); option.value = equipo.name; option.textContent = equipo.name; equipoActaSelect.appendChild(option); }); equipoActaSelect.disabled = false; }

        // --- Poblar Tarjetas Temas en Panel ---
        function populateTemaCards(temasData) { temasPanelContent.innerHTML = ''; if (!temasData || !Array.isArray(temasData) || temasData.length === 0) { console.warn("Datos de temas inv√°lidos o vac√≠os."); temasPanelContent.innerHTML = '<p style="text-align: center; color: var(--text-light);">No hay temas sugeridos.</p>'; return; } temasData.forEach(tema => { const card = document.createElement('div'); card.className = 'tema-card'; card.dataset.tema = tema.temaInstruccion; card.dataset.tratar = tema.temasTratar; const title = document.createElement('span'); title.className = 'tema-card-title'; title.textContent = tema.temaInstruccion; card.appendChild(title); card.addEventListener('click', () => { temaInput.value = card.dataset.tema; temasTextarea.value = card.dataset.tratar; closeTemasPanel(); }); temasPanelContent.appendChild(card); }); }

        // --- LocalStorage y UpdateForm ---
        function saveToLocalStorage(data) { localStorage.setItem('actaData', JSON.stringify(data)); }
        function loadFromLocalStorage() { const data = localStorage.getItem('actaData'); return data ? JSON.parse(data) : null; }
        function updateForm(data) { if (data) { document.getElementById('grado').value = data.grado || ''; document.getElementById('nombre').value = data.nombre || ''; document.getElementById('cargo').value = data.cargo || ''; temaInput.value = data.tema || ''; temasTextarea.value = data.temas || ''; setTimeout(() => { if (data.equipo && equipoActaSelect.options.length > 1) { if ([...equipoActaSelect.options].some(option => option.value === data.equipo)) { equipoActaSelect.value = data.equipo; } else { console.warn(`Equipo guardado "${data.equipo}" no encontrado.`); equipoActaSelect.value = ""; } } else { equipoActaSelect.value = ""; } }, 100); } else { actaForm.reset(); equipoActaSelect.value = ""; } }

        // --- Determinar Art√≠culo y ToTitleCase ---
        function determinarArticulo(tema) { const t = tema.trim().toLowerCase(); if (!t) return { articulo: "EL", articuloMin: "el" }; const m = ["protocolo", "procedimiento", "manual", "instructivo", "reglamento", "decreto", "c√≥digo", "estatuto", "memorando", "oficio", "formulario", "programa", "plan", "sistema", "m√©todo", "formato", "proceso", "uso", "manejo", "curso", "taller", "seminario", "simposio", "congreso", "informe", "reporte", "documento", "expediente", "registro", "archivo", "control", "seguimiento", "operativo", "operacional", "servicio", "deber"]; const f = ["normativa", "norma", "directiva", "instrucci√≥n", "circular", "resoluci√≥n", "orden", "directriz", "ley", "regulaci√≥n", "disposici√≥n", "medida", "acci√≥n", "gu√≠a", "metodolog√≠a", "t√©cnica", "estrategia", "t√°ctica", "operaci√≥n", "actividad", "capacitaci√≥n", "formaci√≥n", "conferencia", "charla", "presentaci√≥n", "exposici√≥n", "jornada", "sesi√≥n", "reuni√≥n", "clase", "pol√≠tica", "aplicaci√≥n", "implementaci√≥n", "comunicaci√≥n"]; const mp = ["protocolos", "procedimientos", "manuales", "instructivos", "reglamentos", "decretos", "c√≥digos", "estatutos", "memorandos", "oficios", "formularios", "programas", "planes", "sistemas", "m√©todos", "formatos", "procesos", "usos", "manejos", "cursos", "talleres", "seminarios", "simposios", "congresos", "informes", "reportes", "documentos", "expedientes", "registros", "archivos", "controles", "seguimientos", "operativos"]; const fp = ["normativas", "normas", "directivas", "instrucciones", "circulares", "resoluciones", "√≥rdenes", "directrices", "leyes", "regulaciones", "disposiciones", "medidas", "acciones", "gu√≠as", "metodolog√≠as", "t√©cnicas", "estrategias", "t√°cticas", "operaciones", "actividades", "capacitaciones", "formaciones", "conferencias", "charlas", "presentaciones", "exposiciones", "jornadas", "sesiones", "reuniones", "clases", "pol√≠ticas", "comunicaciones"]; const p = t.split(' '); let i = 0; const pa = ["de", "del", "la", "el", "los", "las", "sobre", "para", "en", "con", "y", "o"]; while (i < p.length && pa.includes(p[i])) { i++; } const p1 = (i < p.length) ? p[i] : p[0]; if (!p1) return { articulo: "EL", articuloMin: "el" }; const plural = p1.endsWith('s') || p1.endsWith('es'); if (mp.includes(p1)) return { articulo: "LOS", articuloMin: "los" }; if (fp.includes(p1)) return { articulo: "LAS", articuloMin: "las" }; if (m.includes(p1)) return { articulo: "EL", articuloMin: "el" }; if (f.includes(p1)) return { articulo: "LA", articuloMin: "la" }; if (plural) { const s = p1.endsWith('es') ? p1.slice(0, -2) : p1.slice(0, -1); if (s.endsWith('a') || s.endsWith('dad') || s.endsWith('ci√≥n') || s.endsWith('si√≥n') || s.endsWith('tud') || s.endsWith('umbre')) return { articulo: "LAS", articuloMin: "las" }; else return { articulo: "LOS", articuloMin: "los" }; } else { if (p1.endsWith('a') || p1.endsWith('dad') || p1.endsWith('ci√≥n') || p1.endsWith('si√≥n') || p1.endsWith('tud') || p1.endsWith('umbre')) return { articulo: "LA", articuloMin: "la" }; else return { articulo: "EL", articuloMin: "el" }; } }
        function toTitleCase(str) { if (!str) return ""; return str.toLowerCase().split(' ').map(function(word) { if (word === 'cai') { return 'CAI'; } let capitalizedWord = word.charAt(0).toUpperCase() + word.slice(1); if (word === 'de') { capitalizedWord = 'de'; } return capitalizedWord; }).join(' '); }

        // --- Funci√≥n Toast ---
        function showToast(message, type = 'success') { const toast = document.createElement('div'); toast.className = `toast-notification ${type}`; toast.innerHTML = `<i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i> ${message}`; if(type === 'error') toast.style.backgroundColor = 'var(--danger)'; document.body.appendChild(toast); setTimeout(() => { toast.classList.add('show'); }, 10); setTimeout(() => { toast.classList.remove('show'); toast.addEventListener('transitionend', () => { if (toast.parentNode) { document.body.removeChild(toast); } }); setTimeout(() => { if (toast.parentNode) { document.body.removeChild(toast); } }, 600); }, 2000); }

         // --- Funci√≥n Copiar Texto (para botones 1 y 2) ---
         async function copyPlainText(text, successMessage = '¬°Texto copiado!') { if (!navigator.clipboard) { showToast('El portapapeles no es compatible.', 'error'); console.warn('Clipboard API no disponible.'); return; } try { await navigator.clipboard.writeText(text); showToast(successMessage); } catch (err) { showToast('Error al copiar texto.', 'error'); console.error('Error al copiar:', err); } }

        // --- Generar el Acta (HTML) y A√±adir Listeners de Copia ---
        function generateActa(data) {
            const selectedEquipo = data.equipo; if (!selectedEquipo) return; let preposition = "a la", article = "la"; if (selectedEquipo.startsWith("CAI")) { preposition = "al"; article = "el"; } const titleCaseEquipo = toTitleCase(selectedEquipo); const { articulo, articuloMin } = determinarArticulo(data.tema);
            document.getElementById('actaGrado').textContent = data.grado + ' ' + data.nombre; document.getElementById('actaCargo').textContent = data.cargo; document.getElementById('actaTema').textContent = data.tema; document.getElementById('actaGrado2').textContent = data.grado + ' ' + data.nombre; document.getElementById('actaCargo2').textContent = data.cargo; document.getElementById('actaTema2').textContent = data.tema; document.getElementById('temasTratar').textContent = data.temas; document.getElementById('actaEquipoDisplay').textContent = selectedEquipo; let equipo1Text = selectedEquipo; if (selectedEquipo.startsWith("ESTACI√ìN")) { equipo1Text = "LA " + selectedEquipo; } else if (selectedEquipo.startsWith("CAI")) { equipo1Text = "EL " + selectedEquipo; } document.getElementById('actaEquipo1').textContent = equipo1Text; document.getElementById('actaEquipo2').textContent = preposition + " " + titleCaseEquipo; document.getElementById('actaEquipo3').textContent = article + " " + titleCaseEquipo; document.getElementById('articuloTema').textContent = articulo; document.getElementById('articuloTema2').textContent = articuloMin;
            actaGeneradaDiv.style.display = 'block';

             // --- A√ëADIR LISTENERS A LOS BOTONES DE COPIA ---
             try {
                 const btnCopyEquipo = document.getElementById('copyEquipoBtn');
                 const btnCopyPrimerP = document.getElementById('copyPrimerParrafoBtn');
                 const btnCopyOrdenDes = document.getElementById('copyOrdenDesarrolloBtn');
                 const targetEquipo = document.getElementById('copyTargetEquipo');
                 const targetPrimerP = document.getElementById('primerParrafo');
                 const targetOrdenDes = document.getElementById('actaContenidoDetallado'); // El div contenedor

                 // Limpiar listeners anteriores clonando los botones
                 const cleanBtn = (btn) => {
                     if (!btn) return null;
                     const newBtn = btn.cloneNode(true);
                     btn.parentNode.replaceChild(newBtn, btn);
                     return newBtn;
                 };

                 const newBtnCopyEquipo = cleanBtn(btnCopyEquipo);
                 const newBtnCopyPrimerP = cleanBtn(btnCopyPrimerP);
                 const newBtnCopyOrdenDes = cleanBtn(btnCopyOrdenDes);

                 // Listener Bot√≥n 1: Copiar Equipo
                 if (newBtnCopyEquipo && targetEquipo) {
                     newBtnCopyEquipo.addEventListener('click', () => {
                         copyPlainText(targetEquipo.innerText.trim(), 'Equipo copiado!');
                     });
                 } else { console.warn("No se encontr√≥ bot√≥n/target para copiar equipo."); }

                  // Listener Bot√≥n 2: Copiar Primer P√°rrafo
                 if (newBtnCopyPrimerP && targetPrimerP) {
                     newBtnCopyPrimerP.addEventListener('click', () => {
                         copyPlainText(targetPrimerP.innerText.trim(), 'P√°rrafo inicial copiado!');
                      });
                 } else { console.warn("No se encontr√≥ bot√≥n/target para copiar primer p√°rrafo."); }

                  // Listener Bot√≥n 3: Copiar Orden del D√≠a y Desarrollo (con formato HTML)
                 if (newBtnCopyOrdenDes && targetOrdenDes) {
                       newBtnCopyOrdenDes.addEventListener('click', async () => { // <--- Marcar como async
                           const container = document.getElementById('actaContenidoDetallado');
                           if (!container) return;

                           try {
                               // Clonar para no afectar el DOM visible
                               const clon = container.cloneNode(true);

                               // Eliminar elementos no deseados del clon
                               const primerH3 = clon.querySelector('h3');
                               const primerBotonCopia = clon.querySelector('.copy-btn-inline');
                               if (primerH3) primerH3.remove();
                               if (primerBotonCopia) primerBotonCopia.remove();

                               // Obtener HTML y texto plano del clon modificado
                               const htmlContent = clon.innerHTML.trim();
                               const textContent = clon.innerText.trim(); // Para fallback

                               // Crear blobs
                               const htmlBlob = new Blob([htmlContent], { type: 'text/html' });
                               const textBlob = new Blob([textContent], { type: 'text/plain' });

                               // Crear ClipboardItem
                               const clipboardItem = new ClipboardItem({
                                   'text/html': htmlBlob,
                                   'text/plain': textBlob
                               });

                               // Escribir en el portapapeles
                               await navigator.clipboard.write([clipboardItem]);
                               showToast('Orden y Desarrollo copiados (con formato)!');

                           } catch (err) {
                               console.error('Error al copiar HTML al portapapeles:', err);
                               // Fallback a copiar solo texto plano (del clon modificado)
                               try {
                                   const clonFallback = container.cloneNode(true);
                                   const h3Fallback = clonFallback.querySelector('h3');
                                   const btnFallback = clonFallback.querySelector('.copy-btn-inline');
                                   if (h3Fallback) h3Fallback.remove();
                                   if (btnFallback) btnFallback.remove();
                                   const textFallback = clonFallback.innerText.trim();
                                   await copyPlainText(textFallback, 'Orden y Desarrollo copiados (solo texto).');
                               } catch (fallbackErr) {
                                    showToast('Error al copiar contenido.', 'error');
                                    console.error('Error en fallback de copia:', fallbackErr);
                               }
                           }
                      });
                 } else { console.warn("No se encontr√≥ bot√≥n/target para copiar orden/desarrollo."); }

             } catch (error) {
                 console.error("Error a√±adiendo listeners de copia:", error);
             }
        }

        // --- INICIALIZACI√ìN ---
        document.addEventListener('DOMContentLoaded', async function() {
             try { const [equiposResponse, temasResponse] = await Promise.all([ fetch('equipos.json').catch(e => { console.error("Fetch equipos fall√≥:", e); return null; }), fetch('temas.json').catch(e => { console.error("Fetch temas fall√≥:", e); return null; }) ]); if (equiposResponse && equiposResponse.ok) { const equiposData = await equiposResponse.json(); populateEquiposDropdown(equiposData); } else { console.error("Error cargando equipos.json:", equiposResponse?.statusText || "Fetch failed"); populateEquiposDropdown(null); } if (temasResponse && temasResponse.ok) { const temasData = await temasResponse.json(); populateTemaCards(temasData); } else { console.error("Error cargando temas.json:", temasResponse?.statusText || "Fetch failed"); populateTemaCards(null); } } catch (error) { console.error("Error general cargando datos JSON:", error); if (equipoActaSelect.options.length <= 1) populateEquiposDropdown(null); if (temasPanelContent.children.length <= 1) populateTemaCards(null); }
             const savedData = loadFromLocalStorage(); updateForm(savedData);
             if (tabPdf.classList.contains('active')) { showPdfSection(); } else { showActaSection(); }
             // Modificaci√≥n: No generar autom√°ticamente al cargar si los listeners se a√±aden en generateActa
             // La generaci√≥n ocurrir√° al hacer submit o si el usuario recarga con datos y hace submit de nuevo.
             // Si se desea generar al cargar *y* tener listeners funcionales, se debe llamar a generateActa aqu√≠:
             if (savedData && savedData.grado && savedData.equipo && savedData.tema && savedData.temas) {
                  setTimeout(() => {
                       if (equipoActaSelect.value === savedData.equipo) {
                           generateActa(savedData); // Llama a generar (y a√±adir listeners) si los datos son v√°lidos
                       }
                  }, 200);
             }
        });

        // --- Submit Formulario ---
        actaForm.addEventListener('submit', function(e) { e.preventDefault(); const data = { equipo: equipoActaSelect.value, grado: document.getElementById('grado').value, nombre: document.getElementById('nombre').value, cargo: document.getElementById('cargo').value, tema: temaInput.value, temas: temasTextarea.value }; if (!data.equipo) { alert("Seleccione un equipo."); equipoActaSelect.focus(); return; } if (!data.grado || !data.nombre || !data.cargo || !data.tema || !data.temas) { alert("Por favor, complete todos los campos."); return; } saveToLocalStorage(data); generateActa(data); });

        // --- EXTRACTOR PDF (Funciones sin cambios, omitidas) ---
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.worker.min.js';
        const fileInput = document.getElementById('fileInput'); const dropZone = document.getElementById('dropZone'); const processButton = document.getElementById('processButton'); const output = document.getElementById('output'); const suggestion = document.getElementById('suggestion'); const stats = document.getElementById('stats'); const processedStat = document.getElementById('processedStat'); const blankStat = document.getElementById('blankStat'); const imageContainer = document.getElementById('imageContainer'); const currentImage = document.getElementById('currentImage'); const downloadAllButton = document.getElementById('downloadAll'); const currentImageIndex = document.getElementById('currentImageIndex'); const totalImages = document.getElementById('totalImages'); const marginRange = document.getElementById('marginRange'); const rangeValueSpan = document.getElementById('rangeValue'); const prevButton = document.getElementById('prevButton'); const nextButton = document.getElementById('nextButton'); let singlePageImages = []; let processedImages = []; let currentIndex = 0; let currentPdfDocument = null;
        marginRange.addEventListener('input', () => { rangeValueSpan.textContent = marginRange.value; }); dropZone.addEventListener('click', () => fileInput.click()); dropZone.addEventListener('dragover', (e) => { e.preventDefault(); dropZone.classList.add('dragover'); }); dropZone.addEventListener('dragleave', () => { dropZone.classList.remove('dragover'); }); dropZone.addEventListener('drop', (e) => { e.preventDefault(); dropZone.classList.remove('dragover'); const files = e.dataTransfer.files; if (files.length) { fileInput.files = files; handleFileSelection(); } }); fileInput.addEventListener('change', handleFileSelection); processButton.addEventListener('click', () => { if (currentPdfDocument) { processPDF(currentPdfDocument); } else { suggestion.innerHTML = '<i class="fas fa-exclamation-circle"></i> Primero carga un archivo PDF.'; suggestion.style.display = 'block'; } });
        async function handleFileSelection() { const file = fileInput.files[0]; output.innerHTML = ''; output.style.display = 'none'; stats.style.display = 'none'; imageContainer.style.display = 'none'; downloadAllButton.style.display = 'none'; singlePageImages = []; processedImages = []; currentIndex = 0; currentPdfDocument = null; if (!file || file.type !== 'application/pdf') { suggestion.innerHTML = '<i class="fas fa-exclamation-circle"></i> Sube un PDF v√°lido.'; suggestion.style.display = 'block'; return; } suggestion.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Analizando archivo...'; suggestion.style.display = 'block'; try { const arrayBuffer = await file.arrayBuffer(); currentPdfDocument = await pdfjsLib.getDocument(arrayBuffer).promise; suggestion.innerHTML = `<i class="fas fa-check-circle"></i> PDF cargado (${currentPdfDocument.numPages} p√°g). Listo para procesar.`; } catch (error) { suggestion.innerHTML = '<i class="fas fa-times-circle"></i> Error al cargar PDF.'; console.error("Error cargar PDF:", error); currentPdfDocument = null; } }
        async function processPDF(pdf) { output.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando PDF...'; output.style.display = 'block'; imageContainer.style.display = 'none'; stats.style.display = 'none'; singlePageImages = []; processedImages = []; currentIndex = 0; downloadAllButton.style.display = 'none'; try { const numPages = pdf.numPages; let processedPages = 0; let blankPages = 0; const pagesMode = parseInt(document.querySelector('input[name="pagesMode"]:checked').value, 10); for (let i = 1; i <= numPages; i++) { output.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Procesando p√°g ${i} de ${numPages}...`; const isBlank = await processPage(pdf, i); if (isBlank) { blankPages++; } else { processedPages++; } } if (pagesMode === 1) { processedImages = singlePageImages; } else if (pagesMode === 4 && singlePageImages.length > 0) { let index = 0; while (index < singlePageImages.length) { const group = singlePageImages.slice(index, index + 4); if (group.length === 4) { const collage = await createCollageOfFour(group); processedImages.push(collage); index += 4; } else { processedImages.push(...group); break; } } } else { processedImages = singlePageImages; } processedStat.textContent = processedPages; blankStat.textContent = blankPages; stats.style.display = 'flex'; output.innerHTML = '<i class="fas fa-check-circle"></i> Proceso completado.'; if (processedImages.length > 0) { currentIndex = 0; totalImages.textContent = processedImages.length; showImage(currentIndex); imageContainer.style.display = 'block'; downloadAllButton.style.display = 'inline-flex'; } else { imageContainer.style.display = 'none'; downloadAllButton.style.display = 'none'; output.innerHTML += '<br>No se extrajeron im√°genes con contenido.'; } } catch (error) { output.innerHTML = `<i class="fas fa-times-circle"></i> Error procesando: ${error.message}`; console.error('Error procesando PDF:', error); } }
        async function processPage(pdf, pageNumber) { const page = await pdf.getPage(pageNumber); const scale = 3; const viewport = page.getViewport({ scale }); const canvas = document.createElement('canvas'); const context = canvas.getContext('2d'); canvas.height = viewport.height; canvas.width = viewport.width; await page.render({ canvasContext: context, viewport: viewport }).promise; const imageData = context.getImageData(0, 0, canvas.width, canvas.height); if (isPageBlank(imageData)) { return true; } const bounds = findContentBounds(imageData); if (bounds.width <= 0 || bounds.height <= 0) { console.warn(`P√°g ${pageNumber}: Contenido inv√°lido tras recorte. Omitiendo.`); return true; } const croppedCanvas = document.createElement('canvas'); croppedCanvas.width = bounds.width; croppedCanvas.height = bounds.height; const croppedContext = croppedCanvas.getContext('2d'); croppedContext.drawImage(canvas, bounds.left, bounds.top, bounds.width, bounds.height, 0, 0, bounds.width, bounds.height); const dataUrl = croppedCanvas.toDataURL('image/png'); singlePageImages.push({ name: `pagina_${pageNumber}.png`, dataUrl: dataUrl }); return false; }
        function isPageBlank(imageData) { const { data, width, height } = imageData; const threshold = 245; const sampleSize = 100; let whitePixels = 0; for (let i = 0; i < sampleSize; i++) { const randomX = Math.floor(Math.random() * width); const randomY = Math.floor(Math.random() * height); const index = (randomY * width + randomX) * 4; if (data[index] > threshold && data[index + 1] > threshold && data[index + 2] > threshold) { whitePixels++; } } return (whitePixels / sampleSize) > 0.98; }
        function findContentBounds(imageData) { const { data, width, height } = imageData; let initialMargin; try { initialMargin = parseInt(marginRange.value, 10); if (isNaN(initialMargin)) throw new Error("Invalid margin"); } catch (e) { console.warn("Using default margin:", e); initialMargin = 150; } let minX = width, minY = height, maxX = 0, maxY = 0; const threshold = 200; const extraMargin = 5; const safeMarginX = Math.min(initialMargin, Math.floor(width / 2) - 1); const safeMarginY = Math.min(initialMargin, Math.floor(height / 2) - 1); for (let y = safeMarginY; y < height - safeMarginY; y++) { for (let x = safeMarginX; x < width - safeMarginX; x++) { const i = (y * width + x) * 4; if (data[i] < threshold || data[i + 1] < threshold || data[i + 2] < threshold) { minX = Math.min(minX, x); minY = Math.min(minY, y); maxX = Math.max(maxX, x); maxY = Math.max(maxY, y); } } } if (maxX < minX || maxY < minY) { console.warn("No content found within margins."); return { left: safeMarginX, top: safeMarginY, width: Math.max(0, width - 2 * safeMarginX), height: Math.max(0, height - 2 * safeMarginY) }; } const left = Math.max(safeMarginX, minX - extraMargin); const top = Math.max(safeMarginY, minY - extraMargin); const right = Math.min(width - safeMarginX - 1, maxX + extraMargin); const bottom = Math.min(height - safeMarginY - 1, maxY + extraMargin); return { left: left, top: top, width: Math.max(0, right - left + 1), height: Math.max(0, bottom - top + 1) }; }
        async function createCollageOfFour(imagesGroup) { const collageWidth = 1275; const collageHeight = 1650; const collageCanvas = document.createElement('canvas'); collageCanvas.width = collageWidth; collageCanvas.height = collageHeight; const collageContext = collageCanvas.getContext('2d'); collageContext.fillStyle = 'white'; collageContext.fillRect(0, 0, collageWidth, collageHeight); const quadrantWidth = collageWidth / 2; const quadrantHeight = collageHeight / 2; for (let i = 0; i < imagesGroup.length; i++) { const imageData = imagesGroup[i]; const imageEl = new Image(); await new Promise((resolve, reject) => { imageEl.onload = resolve; imageEl.onerror = reject; imageEl.src = imageData.dataUrl; }); const row = Math.floor(i / 2); const col = i % 2; const dx = col * quadrantWidth; const dy = row * quadrantHeight; const aspectRatio = imageEl.width / imageEl.height; let drawWidth = quadrantWidth; let drawHeight = quadrantHeight; if (quadrantWidth / quadrantHeight > aspectRatio) { drawWidth = quadrantHeight * aspectRatio; } else { drawHeight = quadrantWidth / aspectRatio; } const offsetX = dx + (quadrantWidth - drawWidth) / 2; const offsetY = dy + (quadrantHeight - drawHeight) / 2; collageContext.drawImage(imageEl, offsetX, offsetY, drawWidth, drawHeight); } const pageNumberMatch = imagesGroup[0].name.match(/pagina_(\d+)/); const collageName = pageNumberMatch ? `collage_pag_${pageNumberMatch[1]}.png` : `collage_${Date.now()}.png`; return { name: collageName, dataUrl: collageCanvas.toDataURL('image/png') }; }
        function showImage(index) { if (!processedImages || processedImages.length === 0 || index < 0 || index >= processedImages.length) { imageContainer.style.display = 'none'; return; } const imageData = processedImages[index]; currentImage.src = imageData.dataUrl; currentImage.alt = imageData.name || `Imagen ${index + 1}`; currentImageIndex.textContent = index + 1; totalImages.textContent = processedImages.length; prevButton.disabled = (index === 0); nextButton.disabled = (index === processedImages.length - 1); imageContainer.style.display = 'block'; }
        prevButton.addEventListener('click', () => { if (currentIndex > 0) { currentIndex--; showImage(currentIndex); } }); nextButton.addEventListener('click', () => { if (currentIndex < processedImages.length - 1) { currentIndex++; showImage(currentIndex); } });
        currentImage.addEventListener('click', async () => { if (!processedImages || processedImages.length === 0 || !navigator.clipboard || !navigator.clipboard.write) { console.warn("Clipboard API not available or no image."); return; } try { const dataUrl = processedImages[currentIndex].dataUrl; const blob = await (await fetch(dataUrl)).blob(); let clipboardItemInput; if (ClipboardItem && blob.type === 'image/png') { clipboardItemInput = { [blob.type]: blob }; } else { console.warn("ClipboardItem PNG might not be supported, using blob type:", blob.type); clipboardItemInput = { [blob.type || 'application/octet-stream']: blob }; } const clipboardItem = new ClipboardItem(clipboardItemInput); await navigator.clipboard.write([clipboardItem]); console.log('Imagen copiada.'); showToast('¬°Imagen copiada!'); if (currentIndex < processedImages.length - 1) { currentIndex++; showImage(currentIndex); } } catch (error) { console.error('Error al copiar imagen:', error); showToast('Error al copiar imagen.'); } });
        async function downloadAllImages() { if (!processedImages || processedImages.length === 0) return; const zip = new JSZip(); processedImages.forEach((image) => { const base64Data = image.dataUrl.split(',')[1]; let safeFileName = (image.name || `imagen_${Date.now()}.png`).replace(/[^a-z0-9_.\-]/gi, '_'); zip.file(safeFileName, base64Data, { base64: true }); }); output.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generando ZIP...'; try { const content = await zip.generateAsync({ type: 'blob' }); const link = document.createElement('a'); link.href = URL.createObjectURL(content); link.download = 'imagenes_extraidas.zip'; link.click(); URL.revokeObjectURL(link.href); output.innerHTML = '<i class="fas fa-check-circle"></i> ZIP generado.'; } catch (error) { output.innerHTML = '<i class="fas fa-times-circle"></i> Error generando ZIP.'; console.error("Error generando ZIP:", error); } }
        downloadAllButton.addEventListener('click', downloadAllImages);

    </script>
</body>
</html>
